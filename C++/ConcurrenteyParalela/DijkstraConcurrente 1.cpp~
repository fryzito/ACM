#include <iostream>
#include <climits>
#include <ctime>

#include <cstdlib>

#include <mpi.h>

using namespace std;

// void min(int *local_min,int *mark,int *pathestimate, int bottom, int top);
// void update_distances(int *pathestimate, int *global_min, int *dyn_graph, int *mark, int size_of_graph, int bottom);
// void draw_mat(int *mat, int size, int rank, int density, int size_of_graph);

/*funkcja drukuj¹ca macierz*/
void print_mat(int *mat, int size)
{
        cout << "DRUKUJE MACIERZ\n\n";
        for (int i = 0; i < size; i++)
        {
                for (int j = 0; j < size; j++)
                {
                        cout << mat[i * size + j] << "\t";
                }
                cout << endl;
        }
}

void min(int *local_min,int *mark,int *pathestimate,const int &bottom,const int &top)
{
        int min = INT_MAX;
        local_min[0] = INT_MAX;

        for(int i = bottom; i <= top; i++)
        {
                if(mark[i]==0)
                {
                        if(min >= pathestimate[i])
                        {
                                min = pathestimate[i];

                                local_min[0] = min;
                                local_min[1] = i;
                        }
                }
        }
}

void update_distances(int *pathestimate, int *global_min, int *dyn_graph, int *mark, int size_of_graph, int bottom)
{
        int min_distance = global_min[0];
        int min_vertex = global_min[1];

        int temp_distance = 0;

        for (int i = 0; i < size_of_graph; i++)
        {       
                temp_distance = dyn_graph[min_vertex * size_of_graph +i];

                if(mark[i + bottom] == 0 && temp_distance > 0)
                {

                        if(pathestimate[i + bottom] > min_distance + temp_distance)
                        {
                                pathestimate[i + bottom] = min_distance + temp_distance;
                        }
                }
        }       
}

void draw_mat(int *mat, int size, int rank, int density, int size_of_graph)
{
        time_t t; 
        srand((unsigned) time(&t) * rank + 1); 
        //srand(time(NULL));
        for (int i = 0; i < size; i++)
        {
                for (int j = 0; j < size_of_graph; j++)
                {
                        if (i == j)
                        {
                                mat[i * size_of_graph + j] = 0;
                        }
                        else
                        {
                                int vertex = rand() % 100;
                                
                                if (vertex <= density)
                                        mat[i * size_of_graph + j] = rand() % 100;
                                else
                                        mat[i * size_of_graph + j] = 0;
                        }
                }
        }

}

int main(int argc, char **argv)
{
        int current_vertex; // zmienic !!
        int count = 0; // zmienic -  nic nie robi
        double init_start, init_end;
  
        int rank; // pozwala okreslic komputer
        int process_count; // process_count
        int size_of_graph; // ( size_of_graph )
        int density;
        
        int *pathestimate;
        int *mark;
        int *dyn_graph;
        
        int source;
        
        int matrix_size ; // wielkosc calej macierzy  ( temp_size )
        
        /*tablica wierzcho³ka o najmniejszej odleg³oci od ród³a
        ca³y czas ustalana na podstawie wszystkich procesów
        przy u¿yciu funkcji MPI_Allreduce
        wartoæ o indeksie 0 to odleg³oæ, a 1 to indeks wierzcho³ka*/
        int* global_min;
        int* local_min;
        
        double start_time; /*zmienne potrzebne do obliczenia czasu wykonywania algorytmu*/
        double end_time;
        int bottom = 0; /* przedzia³ grafu i wektora odleg³oæi na jakim dany proces pracuje*/
        int top = 0;

        MPI_Init(&argc, &argv); // inicjalizacja

        MPI_Comm_rank(MPI_COMM_WORLD, &rank); // ktory komputer
        MPI_Comm_size(MPI_COMM_WORLD, &process_count); // ilosc procesow

//      MPI_Bcast
//      cout << argc << endl;
//      for(int i=0;i<argc;++i)
//        cout << argv[i] << endl;
        
        if ( argc > 2 )
        {
                size_of_graph    = atoi(argv[1]);
                density          = atoi(argv[2]);
        }       
        else
        {
                if (rank == 0)
                {
                      cout << "brak argumentow wejsciowych -  podaj nowe:"
                            << endl << "rozmiar grafu: ";       
                      cin >> size_of_graph;
                      cout << "gestosc grafu: ";
                      cin >> density;
                }       
        }
        
        // iloczyn macierz lokalnej i ilosc procesow
        matrix_size = size_of_graph * process_count;
        
        if (rank == 0)
        {
                cout << "Kolumn dla procesu: " <<  size_of_graph << " | Rozmiar grafu: " << matrix_size << endl;
                cout << "Maksymalny INT: " << INT_MAX << endl;
                cout << "Pamieci dla jednego procesu: " << size_of_graph * matrix_size << endl;
                cout << "Gestosc grafu: " << density << endl;
        }

        init_start      =       MPI_Wtime();
        bottom          =       rank * size_of_graph;
        top             =       bottom + size_of_graph - 1;

        dyn_graph = new int[size_of_graph * matrix_size];
        draw_mat(dyn_graph, matrix_size, rank, density, size_of_graph);

        pathestimate = new int[matrix_size];
        mark = new int[matrix_size];

        local_min = new int[2];
        global_min = new int[2];

        source = 0;

        for(int i = 0; i < matrix_size; i++)
        {
                mark[i] = 0;
                pathestimate[i] = INT_MAX;
        }

        pathestimate[source] = 0;
    
        init_end=MPI_Wtime();
        
        if(rank==0)
          cout << "Czas przeznaczony na inicjalizacje  " << init_end-init_start << " sekund" << endl;

        start_time = MPI_Wtime();
        
        if(rank==0)
                cout << " pracuja : \n";
        for(int i=0;i<process_count;++i)
        {
                if(rank==i)
                        cout << i << " ";
        }
        
        if(rank==0)
                cout << "Matrix size: " << matrix_size << endl;
        for(int i=1; i < matrix_size; ++i)
        {

                min(local_min, mark, pathestimate, bottom, top);
//              MPI_Allreduce (local_min, global_min, 2, MPI_2INT, MPI_MINLOC, MPI_COMM_WORLD);
                
//              cout << endl;
//              for(int j=0;j<2;++j)
//              {
//                      cout << rank << "\t" << local_min[j] << " " << global_min[j] << endl; 
//              }
                
                current_vertex = global_min[1];
                update_distances(pathestimate, global_min, dyn_graph, mark, size_of_graph, bottom);
          
                mark[global_min[1]] = 1;
        }
        
        int *recv_tab = new int[matrix_size];
        try
        {
                MPI_Gather(pathestimate + bottom, size_of_graph, MPI_INT, pathestimate, size_of_graph, MPI_INT,0, MPI_COMM_WORLD);
        }
        catch(exception &e)
        {
                cout << "blad" ;
        }
        end_time = MPI_Wtime();
        MPI_Finalize(); // koniec pracy MPI

        //print_mat(pathestimate, size_of_graph);
        
        delete [] dyn_graph ;
        delete [] pathestimate ;
        delete [] mark;
        delete [] recv_tab;
        
        if (rank == 0)
        {
                cout << "\n\nAlgorytm wykonal sie w " << end_time - start_time << endl;
        cout << "Czas wykonania sie calego programu " << end_time - init_start << endl;
        }

        return 0;
}